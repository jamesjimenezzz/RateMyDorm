// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum Role {
  admin
  user
}


model User {
  id String @id @default(uuid())
  name String
  email String @unique
  imageUrl String?
  role Role @default(user)
  clerkId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addedSchools School[]
  addedDorms Dorm[]

}

enum Status {
  pending
  approved
  rejected
}

enum SchoolType {
  Public
  Private
  Community
  LiberalArts
}

enum DormsNearby {
  Yes
  Some
  None
}

model School {
  id String @id @default(uuid())
  name String
  shortName String?
  slug String @unique
  city String
  state String
  schoolType SchoolType
  dormsNearby  DormsNearby
  website String?
  picture String[]
  status Status @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dorms Dorm[]
  addedById String
  addedBy User @relation(fields: [addedById], references: id)
}


enum RoomType {
  single
  double
  triple
  suite
  studio
  apartmentStyle
}

enum YearLived {
  freshman
  sophomore
  junior
  senior
  graduate
}

enum Semester {
  fall
  spring
  summer
  fullYear
}

enum Recommendation {
  yes
  no
  maybe
}

model Dorm {
  id String @id @default(uuid())
  name String
  roomType RoomType
  yearLived YearLived
  semester Semester
  photoUrl String?
  cleanlinessRate Int
  noiseLevelRate Int
  locationRate Int
  amenitiesRate Int
  reviewTitle String
  reviewDescription String
  likeMost String
  improve String
  recommendation Recommendation
  isAnonymous Boolean
  userName String? 
  classYear YearLived
  schoolSlug String
  school School @relation(fields: [schoolSlug], references: [slug] )
  status Status @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addedById String
  addedBy User @relation(fields: [addedById], references: [id])
}